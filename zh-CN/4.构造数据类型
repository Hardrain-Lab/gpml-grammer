4. 构造数据类型
--------------------


	构造数据类型包括数组、枚举、结构体、共用体和用户自定义类型等。

4.1 数组类型

	数组是具有相同数据类型的元素序列，
	一维数组的定义格式如下

	<数组 名="数组名" 类型="元素数据类型"[ 大小="常量表达式"][ 初="值1,值2,...,值n"] />
或	<array name="Array Name" type="Element Data Type" size="Constant Expression"[ default="value 1,value 2,...,value n"] />
或	<变量 名="数组名" 类型="元素数据类型[大小]"[ 初="值1,值2,...,值n"] /> <!-- 一个数组的类型为 数组元素类型[] (如int[]) -->
或	<变量 名="[大小]数组名" 类型="元素数据类型"[ 初="值1,值2,...,值n"] />
或	<变量 名="数组名[大小]" 类型="元素数据类型"[ 初="值1,值2,...,值n"] />

特别的，对于字符数组(字符串)
	<数组 名="字符串名" 类型="字符" 大小="字符串长度"[ 初="初始字符串"] />
或	<array name="String Name" type="char" size="String Length"[ default="Default String"] />
或	<变量 名="数组名" 类型="字符[字符串长度]"[ 初="初始字符串"] />

	其中，“类型”指出数组元素的数据类型，“数组名”指出数组的名字，“常量表达式”指出一维数组中存储的元素个数。
	例如，以下语句定义了一个具有10个元素的整型数组 甲 :

	<数组 名="甲" 类型="整型" 大小="10" 初始值="0,1,6,88,12" /> <!-- 只初始化了前5个元素,其他元素为0 -->

	初始化的值用英文逗号','分割。
	对数组中某一个元素进行访问是通过数组名加下标实现的，也就是说，在数组名字后面的放括号([])内加入特定元素的位置编号，
	就可以应用这些元素中的任何一个了。注意，数组的下标是从0开始。数组名前用不用加美元符号和变量的规则一样。数组名等价于&(数组名[0])。

	GPML不支持数组之间的直接赋值，因而只能一个一个元素的赋值。如要将一个大小为20的数组甲赋给另一个同样大小的数组乙，
	可以利用循环进行：

	<for 初="$i=0" ce="$i<20" e="$i++" do="$乙[$i] = $甲[$i]" />

	二维及多维数组的定义和初始化格式如下

	<数组 名="数组名" 类型="元素数据类型" 大小="第一维大小,第二维大小[,第三维大小[,..[,第n维大小]]]" 初="{{..},{..},{..},..,{..}},{{..},{..},{..},..,{..}},{{..},{..},{..},..,{..}},..,{{..},{..},{..},..,{..}}" />

	例如:
	<数组 名="甲" 类型="浮点" 大小="3,2" 初="{0.0,1.1},{2.1,1.0},{3.55,90.3}" />

4.2 枚举类型
	枚举类型定义了一些整型符号常量的集合，其格式如下：

	<枚举 名="枚举类型名" 标识="标识符1[=值1],标识符2[=值2],..,标识符n[=值n]" />
或	<enum name="Enum type name" tag="Tag 1[=value 1], Tag 2[=Value 2], .., Tag n[=Value n]" />

	枚举集合的类型名可以用于变量定义。例如：

	<枚举 名="星期数" 标识="星期日,星期一,星期二,星期三,星期四,星期五,星期六" />
	<变量 名="今天,明天" 类型="星期数" />

	则有

	<mov f="星期五" t="$今天" />	<!-- 合法,今天值为5 -->
	<mov f="$今天" t="$明天" />	<!-- 合法,明天值为5 -->
	<var 名="n" 类型="整型" 值="$今天" /> 	<1-- 合法,n值为5 -->
	<mov f="3" t="$明天" />		<!-- 不合法,不能直接赋整数值 -->

4.3 结构体类型
	(关于什么是结构体，请参见C语言教程对结构体的描述)
	在GPML中，结构体类型和结构体变量的声明格式如下：

	<结构 名="结构体名">
		<变量 名="成员1" 类型="成员1类型"[ 值="初值1"][ 附加=".."] />
		<变量 名="成员2" 类型="成员2类型"[ 值="初值2"][ 附加=".."] />
		...
		<变量 名="成员n" 类型="成员n类型"[ 值="初值n"][ 附加=".."] />
	</结构>
或
	<struct name="Struct Name">
		<var name="Member 1" type="The type of Member 1"[ value="Default Value Expression 1"][ ap=".."] />
		<var name="Member 2" type="The type of Member 2"[ value="Default Value Expression 2"][ ap=".."] />
		...
		<var name="Member n" type="The type of Member n"[ value="Default Value Expression n"][ ap=".."] />
	</struct>

	可以像使用系统欲定义数据类型一样定义结构体类型变量：

	<变量 名="变量名" 类型="结构体名"[ 值="{成员1初始值,成员2初始值,..,成员N初始值}"] />
	
	初值一定要与定义成员时的顺序一样。
	使用方法, $变量名.成员名 即可，加不加美元符号跟普通变量规则一样，成员名始终不用加美元符号。

