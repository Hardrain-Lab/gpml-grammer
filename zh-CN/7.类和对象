7. 类和对象
-------------------------

	什么是类？抱歉本文档不能告诉您什么是类，因为本文档不是一篇基础教
程。请您参考C++或PHP教程中对类的描述。

7.1 类

 1. 类的声明
	类是一种用户自定义的数据类型，声明类的一般格式如下：

	<类 名="类名">
	<私有>
		私有数据成员和成员函数
	</私有>
	<保护>
		保护数据成员和成员函数
	</保护>
	<公有>
		公有数据成员和成员函数
	</公有>
	</类>
或
	<class name="Class Name">
	<private>
		Private Members
	</private>
	<protected>
		Protected Members
	</protected>
	<public>
		Public Members
	</public>
	</class>
	各个成员函数的实现

	类的数据成员一般定义形式
	<变量 名="数据成员名" 类型="数据成员类型"[ 附加=".."] />


	成员函数一般声明形式
	<函数 名="函数名"[ 返回="函数返回值类型"][ 参数="[形参1:]形参1类型,[形参2:]形参2类型,..,[形参n:]形参n类型"][ 附加=".."] />

	也可以在类界面直接定义，不过推荐类实现与类界面分开。
	(类界面外部的)成员函数实现:
	<函数 名="类名::函数名"[ 返回="函数返回值类型"][ 参数="[形参1:]形参1类型,[形参2:]形参2类型,..,[形参n:]形参n类型"][ 附加=".."]>
		函数体..
	</函数>

	(前向)引用声明:

	<类 名="类名"[ 附加=".."] />

7.2 对象

	对象是一个类的实例化。

	定义类对象的格式有如下几种：

	<类名 名="对象名表"[ 附加=".."][ 构造函数参数] />
	<变量 名="对象名表" 类型="类名"[ 附加=".."][ 构造函数参数] />
	
	对象名表可以有一个或多个对象，多个对象用英文逗号','分割。

	对象的数据成员的访问方式如下：

	$对象名.数据成员名

	对象的成员函数调用方法:

	<调用 对象="$对象名" 方法="成员名"[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />
或	<调用 函数="$对象名.成员名"[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />
或	<$对象名.成员名[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />

7.2 构造函数
	(什么是构造函数？在这里不做解释，请参考C++教程中对构造函数的解释)
	构造函数的名字与类的名字相同，且没有返回值(不需要且不能定义“返回”属性)，一个类可以有多个构造函数，通过不同的参数(必须不同)来标识不同的
	构造函数。当对象创建时，构造函数会自动地执行；由于其没有类型，不能像其他函数那样进行调用。当类对象说明时调用哪一个构造函数取决于传递给
	它的参数名和类型。

 1. 调用构造函数
	当一个对象创建时，会自动调用默认构造函数(即无参数的构造函数)。

	若要调用带参数的构造函数，其语法如下：

	<变量声明语句(略) 形参1="实参1"[ 形参2="实参2"][ ..][ 形参n="实参n"] />

	其中变量声明语句可以是<变量>或<类名>等。例如：

	<变量 名="我的对象" 类型="我的类" a="2" b="3" /> <!-- 后面的a,b是构造函数的形参 -->

 2. 复制构造函数
	复制构造函数用于将一个已知对象的数据成员复制给正在创建的另一个同类的对象。除此之外，复制构造函数可以像其他构造函数一样定义和使用。
	声明构造函数的格式如下(在类界面中):

	<函数 名="类名" 参数="引用名:类名&" /> <!-- 类名后面有一个引用运算符& -->

	*注意* 复制构造函数必须按引用调用，不然将产生无限递归。

	一般在以下3种情况下，复制构造函数都会自动被调用：

	· 当说明一个类的对象时，使用另一个对象来初始化；
	· 当一个函数返回值为类类型时；
	· 当一个类类型的实参传递给函数中的传值调用参数时；

7.3 析构函数
	(什么是析构函数？在这里不做介绍，请参考C++教程中对析构函数的解释)
	析构函数是一个类对象被销毁时自动执行的函数，其定义格式如下(在类界面内):

	<函数 名="~类名" />

	默认析构函数是一个空函数。

	析构函数具有以下性质：

	· 析构函数在类对象销毁时自动执行；
	· 一个类只能由一个析构函数，而且析构函数没有且不能有参数；
	· 析构函数的名字是“~”加上类名(中间不能有空格)；
	· 与构造函数一样，析构函数也没有任何类型，即不属于返回值函数也不属于无返回值函数。他们不能像其他函数那样被调用。

 2. 析构函数的调用
	一个对象的生存期结束时，或使用<删 />命令时，类对象会被销毁，此前会自动执行析构函数。

7.4 $本 指针

	类成员函数使用本对象类数据成员时，需要使用$this变量.
	其格式如下:

	$本.类数据成员名

	调用本对象成员函数如下:

	<调用 对象="$本" 方法="成员名"[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />
或	<调用 函数="$本.成员名"[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />
或	<$本.成员名[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接受返回值的变量"] />

7.5 友元函数
	(关于友元函数请参考C++中对友元函数的描述)
	GPML中友元函数的声明格式如下:

	<函数 名="友元函数名"[ 返回="函数类型"][ 参数="[形参1:]形参1类型,[形参2:]形参2类型,..,[形参n:]形参n类型"] 附加="友[,..]" />

	友元函数的调用和一般函数的调用相同，友元函数不是本类的数据成员(友元函数应该在类界面中声明,但定义时不必指定类名)，
	调用友元函数时不需要使用'.'运算符，在定义时也不需要使用类前缀。

	说明一个类为另一个类的友元类：

	<类 名="甲">
	...
	<公共>
		<类 名="乙" 附加="友[,..]" />	<!-- 声明类乙为类甲的友元类 -->
		...
	</公共>
	</类>



=====
	类成员函数声明中"附加"属性可用值：友(friend), 虚(virtual), 常(const)

