3.控制语句
--------------------


3.1 顺序控制语句

	所谓顺序结构，就是按照语句的顺序一条一条的执行。
	顺序控制语句是一类简单的语句，包括表达式语句、复合语句、空语句等。

	空语句是<空 />(<nop />)。它不做任何操作，用在需要一条语句、但又不做任何操作的地方。

3.2 选择控制语句

 1. 如果语句
	如果语句用于在程序中有条件地执行某一语句序列，它的基本语法格式如下：

	<若 条件="<条件表达式>">
		<!-- 语句[序列] -->
	</若>
或
	<if ce="<Conditional expression>">
		<!-- Statement[s] -->
	</if>

等价于
	<若 条件="<条件表达式>" 执行="<可执行语句>" />
	<if ce="<Conditional Expression>" do="<executed statement>" />

	其功能是：当“条件表达式”为真时执行 语句[序列] 。

 2. 如果…否则…语句
	如果希望在“条件表达式”为真或为假时分别执行不同的语句，
	则用<否则>来引入条件表达式为假时执行的语句序列，
	这就是<若>..<否则>..语句，他根据不同的条件分别执行不同的语句(序列)，其语法格式如下：

	<若 条件="<条件表达式>">
		<!-- 语句(序列)1 -->
	</若>
	<否则>
		<!-- 语句(序列)2 -->
	</否则>
或
	<if ce="<Conditional expression>">
		<!-- Statement(s) 1 -->
	</if>
	<else>
		<!-- Statement(s) 2 -->
	</else>

 3. 如果..否则若语句
	若..否则若..语句用于进行多重判断，其语法形式如下：

	<若 条件="<条件表达式1>">
		语句1
	</若>
	<否则若 条件="<条件表达式2>">
		语句2
	</否则若>
	...
	<否则若 条件="<条件表达式n>">
		语句n
	</否则若>
	<否则>
		语句n+1
	</否则>
或
	<if ce="<Conditional Expression 1>">
		Statement 1
	</if>
	<elif ce="<Conditional Expression 2>">
		Statement 2
	</elif>
	...
	<elif ce="<Conditional Expression n>">
		Statement n
	</elif>
	<else>
		Statement n+1
	</else>

 4. 开关语句
	开关语句相似于C++中的switch语句，用于多重选择场合，
	测试某一个变量具有多个值时所执行的动作。	开关语句
	的语法形式是：

	<开关 式="<整型表达式>">
	<情况 值="<整型常量表达式1>" /> <语句1>
	<情况 值="<整型常量表达式2>" /> <语句2>
	...
	<情况 值="<整型常量表达式n>" /> <语句n>
	<默认 /> <语句n+1>
	</开关>
或
	<switch e="<Integer Expression>">
	<case v="<Integer Constant Expression 1>" /> <Statement 1>
	<case v="<Integer Constant Expression 2>" /> <Statement 2>
	...
	<case v="<Integer Constant Expression n>" /> <Statement n>
	<default /> <Statement n+1>
	</switch>

	开关语句的执行顺序是：首先计算开关语句中的“整型表达式”的值，然后在情况语句中寻找值相等的整型常量表达式，并以此为入口标号，由此开始顺序执行。如果没有找到相等的整型常量表达式，则从“<默认 />”开始执行。
	使用开关语句应注意下列问题：
	· 整型表达式包括字符型表达式或枚举型表达式；
	· 各常量表达式的值不能相同，但次序不影响执行结果；
	· 每个情况分支可以用多条语句；
	· 和C++一样，每个情况语句只是一个入口标号，并不能确定执行的终止点，因此每个情况分支的最后应该加<跳出 />语句，用来结束整个开关结构(如果需要)，否则会从入口点开始一直执行到开关结构的结束点；
	· 当若干个分支需要执行相同操作时，可以使多个情况分支共用一组语句。

3.3 循环控制语句
	
	循环控制语句提供重复处理的能力，当某一特定条件为真时，循环语句就重复执行，并且每循环一次，就会测试一下循环条件，
	如果为假，则循环结束，否则继续循环。GPML支持三种格式的循环控制语句：当、干和计数语句。三者可以完成类似的功能，不同的是他们控制循环的方式。

 1. 当语句
	当语句的一般形式为：	

	<当 式="表达式">
		语句(序列)
	</当>
	<当 式="表达式" 执行="可执行语句(序列)" />
或
	<while e="Expression">
		Statement(s)
	</while>
	<while e="Expression" do="Executed Statement(s)" />

	当“表达式”的运算结果为真时，则重复执行“语句(序列)”。每执行一次“语句(序列)”后，就会重新计算一次“表达式”，当该表达式的值为假时，循环结束。

 2. 干语句
	干语句的一般形式为：

	<干 式="条件表达式">
		语句(序列)
	</干>
	<干 式="条件表达式" 执行="可执行语句" />
或
	<do e="Expression">
		Statement(s)
	</do>
	<do e="Expression" do="Executed Statement(s)" />

	干语句每一次循环执行一次“语句”，然后计算“条件表达式”是否为真，如果是，则继续执行循环，否则结束循环。
	与当语句不同的是，干循环中的“语句”至少会执行一次，而当语句当条件第一次就不满足时，“语句”一次也不会被执行。

 3. 计数语句
	计数语句通常用于预先知道循环次数的情况，其一般形式为：

	<计数 初="初始化语句" 条件="条件表达式" 尾="收尾语句">
		语句
	</计数>
	<计数 初="初始化语句" 条件="条件表达式" 尾="收尾语句" 执行="循环体(可执行语句(只能是简单的赋值表达式))[序列])" />
或
	<for init="Initialization Statement" ce="Conditional Expression" e="Statement">
		Satement(s)
	</for>
	<for init="Initialization Statement" ce="Conditional Expression" e="Statement" do="Loop Body(Executed Statement[s])" />

	具体来说，计数循环的执行过程为：
	
	(1) 执行“初始化语句”；
	(2) 计算“条件表达式”的值；
	(3) 如果“条件表达式”的值为真，先执行后面的“语句”，再执行“收尾语句”，然后转向步骤2；如果“条件表达式”的值为假，则结束循环。


3.4 跳转语句

	除了顺序执行和选择、循环控制外，有时需要中断一段程序的执行，跳转到其他地方继续执行，这是需用到跳转语句，包括跳出、继续和转语句。

 1. 跳出语句
	跳出语句用于从当前的循环语句(三种皆可)内跳转出来，接着执行循环语句后面的语句。跳出语句还可以用于开关语句中用于跳出开关语句。

	<跳出 />
	<break />

 2. 继续语句
	继续语句也用与循环语句，它类似于跳出，但它不是结束循环，而是结束循环语句的当前一次循环，接着执行下一次循环。
	在当和干循环结构中，执行控制权转至对“条件表达式的判断”，在计数结构中，转去执行“收尾语句”。

	<继续 />
	<continue />

 3. 转语句
	转语句也可以跳出循环和开关语句。转语句无条件转移程序的执行控制，它总是与一标号相匹配，其形式为：

	<转 至="标号" />
	<go to="Label" />

	标号是一个用户自定义的标识符，它可以处于转语句之前或之后，蛋是标号必须与转语句处于同一个函数中。
	可以如下定义标号：

	<标号 名="标号名" />
	<label name="Label Name" />

	[!注意]
	由于转语句会严重破坏程序的结构，使用转语句的程序完全可以修改为更合理的程序结构，所以一般不推荐使用。


