6. 函数
--------------------

	GPML中的模块有函数和类和应用。函数设计可以使程序模块化，函数作为计算单元，包括参数输入，
	计算结果或返回值是它的输出。

6.1 函数的定义和调用

	在使用函数时，要先对函数进行定义，确定它要实现的功能。函数的使用就是调用函数的过程。
	在函数定义和调用中，把传递给函数的值成为实际参数(实参)，把函数内部用来接收传递给函数的值
	的变量称为形式参数(形参)。

 1. 函数定义
	其形式如下：

	<函数 名="函数名"[ 返回="函数返回值类型"][ 参数="形参1:形参1类型,形参2:形参2类型,..,形参n:形参n类型"]>
		函数体
	</函数>
或
	<function name="Function Name"[ return="Return Value Type"][ param="Param 1:Type of Param 1, Param 2:Type of Param 2, .., Param n:Type of Param n"]>
		Function Body
	</function>

	其中，“返回”决定了函数所需要返回的返回值类型，它可以是除函数或数组之外的任何有效的GPML数据类型，包括复合
	数据类型等。如果不需要函数有返回值(即只是一个过程调用)，则只要指定“返回”为无(void)或不写即可。
	“参数”个数为零时，可以省略不写或指定为无(void)。[推荐后者]
	下面是一个函数的例子，他返回两个整数中的较大者。函数有两个形参甲和乙，返回值类型为整型：

	<函数 名="最大值" 参数="甲:整型,乙:整型">
		<返回 值="甲>乙?甲:乙" />
	</函数>

 2. 函数的声明
	定义一个函数就是为了以后的调用，但如果函数定义在后而调用在前，就必须将函数定义在前或者在调用前进行“函数的声明”。
	声明一个函数的格式如下：

	<函数 名="函数名"[ 返回="函数返回值类型"][ 参数="[形参1:]形参1类型,[形参2:]形参2类型,..,[形参n:]形参n类型"] />
或
	<function name="Function Name"[ return="Return Value Type"][ param="Param 1:Type of Param 1, Param 2:Type of Param 2, .., Param n:Type of Param n"] />

 3. 函数的调用
	调用函数有两种形式。
	第一种：

	<函数名[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接收返回值的变量名"] />
或	<Func_name[ Param 1="Arg 1"[ Param 2="Arg 2"[ ..[ Param n="Arg n"]]]][ rt="The name of var that receive a return value"] />

	第二种:
	<调用 函数="要调用的函数名"[ 形参1="实参1"[ 形参2="实参2"[ ..[ 形参n="实参n"]]]][ 返回到="接收返回值的变量名"] />
或	<call func="The function to call"[ Param 1="Arg 1"[ Param 2="Arg 2"[ ..[ Param n="Arg n"]]]][ rt="The name of var that receive a return value"] />

6.3 函数的参数传递

 1. 值传递
	不解释。

 2. 引用传递
	(关于什么是引用，请自行阅读C++中对引用的描述)
	建立一个引用时，只需在“类型”填上被关联变量的数据类型后跟引用运算符"&"即可，适用于定义变量、定义形参、定义函数返回值等处。

 3. 函数的默认值
	在GPML中，允许在函数的声明或定义时给一个或多个参数的指定默认值。这样在调用时，可以补给出参数，而按指定的默认值进行工作。
	例如，以下是带默认参数值的函数声明：

	<函数 名="fun" 参数="x:int,y:int=0,z:char*&" />

	函数可以将其全部或部分参数声明为带默认值，带默认值的参数可以在任意位置。

6.4 域运算符

	局部变量可以隐藏全局变量，那么在有同名全局和局部变量的情形时可以通过域运算符"::"对全局变量访问。以域运算符为前缀的变量表示全局变量。

